{"version":3,"sources":["components/Character/index.js","components/Wrapper/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Character","props","className","alt","name","src","image","onClick","handleClick","id","Wrapper","children","Header","headerText","score","topScore","Footer","Component","App","state","characters","characterID","charArr","i","length","console","log","clicked","setState","update","$set","shuffleArray","array","j","Math","floor","random","temp","characterCards","this","map","item","imageURL","key","shuffledCards","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ilCAaeA,MAVf,SAAmBC,GACf,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,UCAhFC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,uBCS1BC,MAVf,SAAgBX,GACd,OACE,yBAAKC,UAAU,UACX,uBAAGO,GAAG,cAAN,8BACA,uBAAGA,GAAG,gBAAgBR,EAAMY,YAC5B,uBAAGJ,GAAG,eAAN,UAA4BR,EAAMa,MAAlC,iBAAuDb,EAAMc,YCOtDC,G,uLAVP,OACI,4BAAQd,UAAU,UACd,yBAAKA,UAAU,aACX,gD,GALCe,c,OCkHNC,E,2MA1GbC,MAAQ,CACLJ,SAAU,EACVD,MAAO,EACPD,WAAY,oCACZO,c,EAKLZ,YAAc,SAAAa,GASZ,IAPA,IAAIC,EAAU,EAAKH,MAAMC,WAOjBG,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IACjCE,QAAQC,IAAI,eAAgBJ,EAAQ,GAAGb,IAEpCY,IAAgBC,EAAQC,GAAGd,MAEF,IAAvBa,EAAQC,GAAGI,QAEZ,EAAKC,SAAS,CACZd,MAAQ,EAAKK,MAAML,MAAQ,EAC3BM,WAAYS,IAAO,EAAKV,MAAMC,WAAZ,eAA0BG,EAAI,CAACI,QAAS,CAACG,MAAM,MACjEjB,WAAY,4BAMX,EAAKM,MAAML,MAAQ,EAAKK,MAAMJ,UAC/B,EAAKa,SAAS,CACZb,SAAU,EAAKI,MAAML,MACrBA,MAAO,EACPD,WAAY,2BACZO,eAEF,WACEK,QAAQC,IAAI,6BAKb,EAAKP,MAAML,OAAS,EAAKK,MAAMJ,UAChC,EAAKa,SAAS,CACZd,MAAO,EACPD,WAAY,2BACZO,eAEF,WACEK,QAAQC,IAAI,iD,EAaxBK,aAAe,SAAAC,GAEb,IADA,IAAIT,EAAIS,EAAMR,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAMU,EAAIC,KAAKC,MAAMD,KAAKE,UAAYb,EAAI,IACpCc,EAAOL,EAAMT,GACnBS,EAAMT,GAAKS,EAAMC,GACjBD,EAAMC,GAAKI,EAEb,OAAOL,G,wEAGG,IAAD,OACHM,EAAiBC,KAAKpB,MAAMC,WAAWoB,KAAI,SAACC,GAAD,OAC/C,kBAAC,EAAD,CACErC,KAAQqC,EAAKrC,KACbE,MAASmC,EAAKC,SACdC,IAAOF,EAAKhC,GACZA,GAAMgC,EAAKhC,GACXD,YAAe,EAAKA,iBAMpBoC,EAAgBL,KAAKR,aAAaO,GAGpC,OACE,6BACE,kBAAC,EAAD,CAAQxB,MAAOyB,KAAKpB,MAAML,MAAOC,SAAYwB,KAAKpB,MAAMJ,SAAUF,WAAc0B,KAAKpB,MAAMN,aACzF,kBAAC,EAAD,KACG+B,GAEL,kBAAC,EAAD,W,GArGUC,IAAM5B,WCEJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b840663.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Character(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} onClick={() => props.handleClick(props.id)}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Character;","import React from \"react\";\n// import \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n        <p id=\"headerLeft\">Bob's Burgers Clicky Game </p>\n        <p id=\"headerMiddle\">{props.headerText}</p>\n        <p id=\"headerRight\">Score: {props.score} | Top Score: {props.topScore}</p>\n    </div>\n  );\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport \"./style.css\"\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <div className=\"container\">\n                    <p>Clicky Game</p>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Character from \"./components/Character\";\nimport Wrapper from \"./components/Wrapper\";\nimport update from \"immutability-helper\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\n\n\nclass App extends React.Component {\n  state = {\n     topScore: 0,\n     score: 0,\n     headerText: \"Don't click the same image twice!\",\n     characters\n  }\n\n\n// On click function to handle each time a char card is clicked on.\nhandleClick = characterID => {\n\n  let charArr = this.state.characters;\n\n  // iterate through the char array to see if the character that was clicked\n  // has already been clicked.  If it hasn't, then increase score. If it has,\n  // then compare old top score to current score.  If current score > top score replace top score. \n  // Reset score and then characters clicked state to false\n\n  for(let i = 0; i < charArr.length; i++) {\n    console.log(\"charArr is: \" +charArr[0].id)\n\n    if(characterID === charArr[i].id) {\n\n      if(charArr[i].clicked === false){\n         \n        this.setState({\n          score:  this.state.score + 1,\n          characters: update(this.state.characters, {[i]: {clicked: {$set: true}}}),\n          headerText: \"You guessed correctly!\"\n        })\n\n\n      } else {\n\n        if(this.state.score > this.state.topScore){\n          this.setState({\n            topScore: this.state.score,\n            score: 0,\n            headerText: \"You guessed incorrectly!\",\n            characters\n          },\n          () => {\n            console.log('Updated new top score!')\n          });\n\n        }\n\n        if(this.state.score <= this.state.topScore){\n          this.setState({\n            score: 0,\n            headerText: \"You guessed incorrectly!\",\n            characters\n          },\n          () => {\n            console.log('Reset-- you did not beat the top score!')\n          });\n        }\n\n      }\n\n   }\n  }\n\n\n};\n\n// shuffle array function so that chars are rendered in a random order each time on render.\nshuffleArray = array => {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n  render() {\n    let characterCards = this.state.characters.map((item) =>\n    <Character\n      name = {item.name}\n      image = {item.imageURL}\n      key = {item.id}\n      id = {item.id}\n      handleClick = {this.handleClick}\n    />\n  )\n\n  //shuffle the array, so that they can be in a random order each time the site renders\n\n  let shuffledCards = this.shuffleArray(characterCards)\n  \n  \n    return (\n      <div>\n        <Header score={this.state.score} topScore = {this.state.topScore} headerText = {this.state.headerText}/>\n          <Wrapper>\n            {shuffledCards}\n          </Wrapper>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}